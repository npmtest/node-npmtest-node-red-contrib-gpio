{"/home/travis/build/npmtest/node-npmtest-node-red-contrib-gpio/test.js":"/* istanbul instrument in package npmtest_node_red_contrib_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-contrib-gpio/lib.npmtest_node_red_contrib_gpio.js":"/* istanbul instrument in package npmtest_node_red_contrib_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_red_contrib_gpio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_red_contrib_gpio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-contrib-gpio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-red-contrib-gpio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_red_contrib_gpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_red_contrib_gpio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_red_contrib_gpio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_red_contrib_gpio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_red_contrib_gpio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_red_contrib_gpio.__dirname + '/lib.npmtest_node_red_contrib_gpio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-contrib-gpio/node_modules/node-red-contrib-gpio/gpio.js":"/*\n\nThe MIT License (MIT)\n=====================\n\nCopyright (c) 2015 Luis Montes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\nvar serialport = require('serialport');\nvar createNodebotNode = require('./lib/nodebotNode');\n\nvar five = require('johnny-five');\nvar vm = require('vm');\nvar util = require('util');\nvar _ = require('lodash');\n\nfunction connectingStatus(n){\n  n.status({fill:\"red\",shape:\"ring\",text:\"connecting ... \"});\n}\n\nfunction networkReadyStatus(n){\n  n.status({fill:\"yellow\",shape:\"ring\",text:\"connecting...\"});\n}\n\nfunction networkErrorStatus(n){\n  n.status({fill:\"red\",shape:\"dot\",text:\"disconnected\"});\n}\n\nfunction ioErrorStatus(n, err){\n  n.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n  n.warn(err);\n}\n\nfunction connectedStatus(n){\n  n.status({fill:\"green\",shape:\"dot\",text:\"connected !!!! \"});\n}\n\n\nfunction init(RED) {\n\n  createNodebotNode(RED);\n\n  function gpioInNode(n) {\n    RED.nodes.createNode(this,n);\n    this.buttonState = -1;\n    this.pin = n.pin;\n    this.state = n.state;\n    this.nodebot = RED.nodes.getNode(n.board);\n    if (typeof this.nodebot === \"object\") {\n\n      var node = this;\n      connectingStatus(node);\n\n      node.nodebot.on('ioready', function() {\n        var io = node.nodebot.io;\n\n        connectedStatus(node);\n        if (node.state == \"ANALOG\") {\n          var samplingInterval = parseInt(n.samplingInterval, 10) || 300;\n          try{io.setSamplingInterval(samplingInterval);}catch(exp){ console.log(exp); }\n          try{io.pinMode(node.pin, io.MODES.ANALOG);}catch(exp){ console.log(exp); }\n          io.analogRead(node.pin, function(data) {\n            var msg = {payload:data, topic:node.pin};\n            node.send(msg);\n          });\n        }\n        else {\n          try{io.pinMode(node.pin, io.MODES.INPUT);}catch(exp){ console.log(exp); }\n            io.digitalRead(node.pin, function(data) {\n            var msg = {payload:data, topic:node.pin};\n            node.send(msg);\n          });\n        }\n      });\n      node.nodebot.on('networkReady', function(){\n        networkReadyStatus(node);\n      });\n      node.nodebot.on('networkError', function(){\n        networkErrorStatus(node);\n      });\n      node.nodebot.on('ioError', function(err){\n        ioErrorStatus(node, err);\n      });\n    }\n    else {\n      this.warn(\"nodebot not configured\");\n    }\n  }\n  RED.nodes.registerType(\"gpio in\",gpioInNode);\n\n  function gpioOutNode(n) {\n    RED.nodes.createNode(this,n);\n    this.buttonState = -1;\n    this.pin = n.pin;\n    this.state = n.state;\n    this.arduino = n.arduino;\n    this.nodebot = RED.nodes.getNode(n.board);\n    this.i2cAddress = parseInt(n.i2cAddress, 10);\n    this.i2cRegister = parseInt(n.i2cRegister, 10);\n    if (typeof this.nodebot === \"object\") {\n        var node = this;\n        connectingStatus(node);\n\n        node.nodebot.on('ioready', function() {\n\n            connectedStatus(node);\n            \n            node.on('input', function(msg) {\n              try{\n                var state = msg.state || node.state;\n                var io = node.nodebot.io;\n                if (state === 'OUTPUT') {\n                  try{io.pinMode(node.pin, io.MODES[state]);}catch(exp){ console.log(exp); }\n                  if ((msg.payload == true)||(msg.payload == 1)||(msg.payload.toString().toLowerCase() === \"on\")) {\n                      io.digitalWrite(node.pin, 1);\n                  }\n                  if ((msg.payload == false)||(msg.payload == 0)||(msg.payload.toString().toLowerCase() === \"off\")) {\n                      io.digitalWrite(node.pin, 0);\n                  }\n                }\n                else if (state === 'PWM') {\n                  try{io.pinMode(node.pin, io.MODES[state]);}catch(exp){ console.log(exp); }\n                  msg.payload = msg.payload * 1;\n                  if ((msg.payload >= 0) && (msg.payload <= 255)) {\n                      //console.log(msg.payload, node.pin);\n                      io.analogWrite(node.pin, msg.payload);\n                  }\n                }\n                else if (state === 'SERVO') {\n                  try{io.pinMode(node.pin, io.MODES[state]);}catch(exp){ console.log(exp); }\n                  msg.payload = msg.payload * 1;\n                  if ((msg.payload >= 0) && (msg.payload <= 180)) {\n                      //console.log(msg.payload, node.pin);\n                      io.servoWrite(node.pin, msg.payload);\n                  }\n                }\n                else if(node.state === 'I2C_READ_REQUEST'){\n                  var register = parseInt(msg.i2cRegister, 10) || parseInt(node.i2cRegister, 10);\n                  var i2cAddress = parseInt(msg.i2cAddress, 10) || parseInt(node.i2cAddress, 10);\n                  var numBytes = parseInt(msg.payload, 10);\n                  if(io.i2cReadOnce && i2cAddress && numBytes){\n                    if(register){\n                      io.i2cReadOnce(i2cAddress, register, numBytes, function(data){\n                        node.send({\n                          payload: data,\n                          register: register,\n                          i2cAddress: i2cAddress,\n                          numBytes: numBytes\n                        });\n                      });\n                    }else{\n                      io.i2cReadOnce(i2cAddress, numBytes, function(data){\n                        node.send({\n                          payload: data,\n                          i2cAddress: i2cAddress,\n                          numBytes: numBytes\n                        });\n                      });\n                    }\n                  }\n                }\n                else if(node.state === 'I2C_WRITE_REQUEST'){\n                  var register = parseInt(msg.i2cRegister, 10) || parseInt(node.i2cRegister, 10);\n                  var i2cAddress = parseInt(msg.i2cAddress, 10) || parseInt(node.i2cAddress, 10);\n                  if(io.i2cWrite && i2cAddress && msg.payload){\n                    if(register){\n                      io.i2cWrite(i2cAddress, register, msg.payload);\n                    }else{\n                      io.i2cWrite(i2cAddress, msg.payload);\n                    }\n                  }\n                }\n                else if(node.state === 'I2C_DELAY'){\n                  if(io.i2cConfig){\n                    if(register){\n                      io.i2cConfig(parseInt(msg.payload, 10));\n                    }\n                  }\n                }\n              }\n              catch(inputExp){\n                node.warn(inputExp);\n              }\n            });\n        });\n        node.nodebot.on('networkReady', function(){\n          networkReadyStatus(node);\n        });\n        node.nodebot.on('networkError', function(){\n          networkErrorStatus(node);\n        });\n        node.nodebot.on('ioError', function(err){\n          ioErrorStatus(node, err);\n        });\n    }\n    else {\n        this.warn(\"nodebot not configured\");\n    }\n\n  }\n\n  RED.nodes.registerType(\"gpio out\",gpioOutNode);\n\n  function handleRoute(req, res, handler){\n    handler(req.query)\n      .then(function(data){\n        res.send(data);\n      }, function(err){\n        console.log('error in gpio request', err);\n        res.send(500);\n      });\n  }\n\n  function listArduinoPorts(callback) {\n      return serialport.list(function(err, ports) {\n        if (err) {\n          return callback(err);\n        }\n        var devices = [];\n        for (var i = 0; i < ports.length; i++) {\n          if (/usb|acm|com\\d+/i.test(ports[i].comName)) {\n            devices.push(ports[i].comName);\n          }\n        }\n        return callback(null, devices);\n      });\n  }\n\n\n  function johnny5Node(n) {\n    RED.nodes.createNode(this,n);\n\n    // console.log('initializing johnny5Node', n);\n    this.nodebot = RED.nodes.getNode(n.board);\n    this.func = n.func;\n    var node = this;\n\n\n    if (typeof this.nodebot === \"object\") {\n        process.nextTick(function(){\n          connectingStatus(node);\n        });\n\n        // console.log('launching johnny5Node', n);\n        node.nodebot.on('ioready', function() {\n          // console.log('launching johnny5Node ioready', n);\n            connectedStatus(node);\n\n            function sendResults(node,msgs) {\n                var _msgid = (1 + Math.random() * 4294967295).toString(16);\n                if (msgs == null) {\n                    return;\n                } else if (!util.isArray(msgs)) {\n                    msgs = [msgs];\n                }\n                var msgCount = 0;\n                for (var m=0;m<msgs.length;m++) {\n                    if (msgs[m]) {\n                        if (util.isArray(msgs[m])) {\n                            for (var n=0; n < msgs[m].length; n++) {\n                                msgs[m][n]._msgid = _msgid;\n                                msgCount++;\n                            }\n                        } else {\n                            msgs[m]._msgid = _msgid;\n                            msgCount++;\n                        }\n                    }\n                }\n                if (msgCount>0) {\n                    node.send(msgs);\n                }\n            }\n\n            var functionText = \"var results = null;\"+\n                   \"results = (function(){ \"+\n                      \"var node = {\"+\n                         \"log:__node__.log,\"+\n                         \"error:__node__.error,\"+\n                         \"warn:__node__.warn,\"+\n                         \"on:__node__.on,\"+\n                         \"status:__node__.status,\"+\n                         \"send:function(msgs){ __node__.send(msgs);}\"+\n                      \"};\\n\"+\n                      node.func+\"\\n\"+\n                   \"})();\";\n\n            var sandbox = {\n                console:console,\n                util:util,\n                Buffer:Buffer,\n                __node__: {\n                    log: function() {\n                        node.log.apply(node, arguments);\n                    },\n                    error: function() {\n                        node.error.apply(node, arguments);\n                    },\n                    warn: function() {\n                        node.warn.apply(node, arguments);\n                    },\n                    send: function(msgs) {\n                        sendResults(node, msgs);\n                    },\n                    on: function() {\n                        node.on.apply(node, arguments);\n                    },\n                    status: function() {\n                        node.status.apply(node, arguments);\n                    }\n                },\n                context: {\n                    set: function () {\n                        return node.context().set.apply(node, arguments);\n                    },\n                    get: function () {\n                        return node.context().get.apply(node, arguments);\n                    },\n                    get global() {\n                        return node.context().global;\n                    },\n                    get flow() {\n                        return node.context().flow;\n                    }\n                },\n                flow: {\n                    set: function () {\n                        node.context().flow.set.apply(node, arguments);\n                    },\n                    get: function () {\n                        return node.context().flow.get.apply(node, arguments);\n                    }\n                },\n                global: {\n                    set: function () {\n                        node.context().global.set.apply(node, arguments);\n                    },\n                    get: function () {\n                        return node.context().global.get.apply(node, arguments);\n                    }\n                },\n                setTimeout: setTimeout,\n                clearTimeout: clearTimeout,\n                _:_,\n                five: five,\n                board: node.nodebot.board,\n                RED: RED,\n                require: require\n\n            };\n            var context = vm.createContext(sandbox);\n\n\n            try {\n              node.script = vm.createScript(functionText);\n              try {\n                  var start = Date.now(); //process.hrtime();\n                  //context.msg = msg;\n                  node.script.runInContext(context);\n                  // console.log('ran script', context);\n\n              } catch(err) {\n\n                  var line = 0;\n                  var errorMessage;\n                  var stack = err.stack.split(/\\r?\\n/);\n                  if (stack.length > 0) {\n                      while (line < stack.length && stack[line].indexOf(\"ReferenceError\") !== 0) {\n                          line++;\n                      }\n\n                      if (line < stack.length) {\n                          errorMessage = stack[line];\n                          var m = /:(\\d+):(\\d+)$/.exec(stack[line+1]);\n                          if (m) {\n                              var lineno = Number(m[1])-1;\n                              var cha = m[2];\n                              errorMessage += \" (line \"+lineno+\", col \"+cha+\")\";\n                          }\n                      }\n                  }\n                  if (!errorMessage) {\n                      errorMessage = err.toString();\n                  }\n                  this.error(errorMessage);\n              }\n\n          } catch(err) {\n              // eg SyntaxError - which v8 doesn't include line number information\n              // so we can't do better than this\n              this.error(err);\n          }\n\n\n\n\n        });\n        node.nodebot.on('networkReady', function(){\n          networkReadyStatus(node);\n        });\n        node.nodebot.on('networkError', function(){\n          networkErrorStatus(node);\n        });\n        node.nodebot.on('ioError', function(err){\n          ioErrorStatus(node, err);\n        });\n    }\n    else {\n        this.warn(\"nodebot not configured\");\n    }\n\n  }\n\n  RED.nodes.registerType(\"johnny5\",johnny5Node);\n\n\n  //routes\n  RED.httpAdmin.get(\"/gpioserialports\", RED.auth.needsPermission(\"arduino.read\"), function(req,res) {\n     listArduinoPorts(function (err, ports) {\n          res.json(ports);\n      });\n  });\n\n}\n\nmodule.exports = init;\n","/home/travis/build/npmtest/node-npmtest-node-red-contrib-gpio/node_modules/node-red-contrib-gpio/lib/nodebotNode.js":"/*\nThe MIT License (MIT)\n=====================\n\nCopyright (c) 2015 Luis Montes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n'use strict';\n\nvar five = require('johnny-five');\nvar firmata = require('firmata');\nvar net = require('net');\n\nfunction createNode(RED){\n\n\n  function start(node){\n    if(node.io){\n      node.io.on('connect', function(){\n        node.emit('networkReady', node.io);\n      });\n      node.board = new five.Board({io: node.io, id: node.id, repl: false, timeout: 2e4});\n      node.board.on('ready', function(){\n        if (RED.settings.verbose) { node.log('io ready'); }\n        process.nextTick(function() {\n          node.emit('ioready', node.io);\n        });\n      });\n\n      node.board.on('error', node.error.bind(node));\n      node.on('close', function(done) {\n\n        if (RED.settings.verbose) { node.log('closing nodebot'); }\n        try{\n\n          if(node.tcpServer){\n            try{\n              node.tcpServer.close();\n            }\n            catch(exp){\n              node.error(exp);\n            }\n          }\n\n          if(node.io && node.io.close){\n            node.io.close();\n          }\n          else if(node.io && node.io.sp){\n            if(node.io.sp.close){\n              node.io.sp.close();\n            }else if(node.io.sp.end){\n              node.io.sp.end();\n            }\n          }\n\n          if(node.client && node.client.stop){\n            node.client.stop();\n          }\n          if(node.client && node.client.close){\n            node.client.close();\n          }\n\n          var cachedBoards = [];\n          five.Board.cache.forEach(function(){\n            five.Board.cache.pop();\n          });\n\n          cachedBoards.forEach(function(board){\n            if(board !== node.board){\n              five.Board.cache.push(board);\n            }\n          });\n\n          //try and cleanup board\n          node.board.register.forEach(function(component){\n            try{\n              if(component.stop){\n                component.stop();\n              }\n              else if(component.state && component.state.intervalId){\n                clearInterval(component.state.intervalId);\n              }\n              else if(component.state && component.state.interval){\n                clearInterval(component.state.interval);\n              }\n              component.io = null;\n              component.board = null;\n            }catch(compE){\n              console.log('error trying to cleanup component', compE);\n            }\n\n          });\n          node.board.io = null;\n\n          done();\n          if (RED.settings.verbose) { node.log(\"port closed\"); }\n        }catch(exp){\n          console.log('error closing', exp);\n          done();\n        }\n      });\n\n    }else{\n      node.emit('ioError', 'invalid IO class');\n    }\n  }\n\n  function nodebotNode(n) {\n    RED.nodes.createNode(this,n);\n    var node = this;\n\n    var boardModule, sp, VirtualSerialPort, client;\n    try{\n      boardModule = require(n.boardType);\n    }catch(exp){\n      node.log('error loading io class', n.boardType, exp);\n      process.nextTick(function() {\n        node.emit('ioError', exp);\n      });\n      return;\n    }\n\n    if(n.boardType === 'firmata'){\n      if(n.connectionType === 'local'){\n        try{\n          node.io = new firmata.Board(n.serialportName, { serialport:{baudRate:57600, bufferSize:256, lock: false} });\n          start(node);\n        }catch(exp){\n          process.nextTick(function() {\n            node.emit('ioError', exp);\n          });\n        }\n      }\n      else if(n.connectionType === 'mqtt'){\n        try{\n          var mqtt = require('mqtt');\n          VirtualSerialPort = require('mqtt-serial').SerialPort;\n\n          client = mqtt.connect(n.mqttServer,\n          {username: n.username, password: n.password});\n          client.on('error', function(err){\n            node.warn(err);\n          });\n\n          sp = new VirtualSerialPort({\n            client: client,\n            transmitTopic: n.pubTopic,\n            receiveTopic: n.subTopic\n          });\n\n          node.io = new firmata.Board(sp, {samplingInterval: 300, reportVersionTimeout: 15000});\n          start(node);\n        }catch(exp){\n          console.log('error initializing mqtt firmata', exp);\n          process.nextTick(function() {\n            node.emit('ioError', exp);\n          });\n        }\n      }\n      else if(n.connectionType === 'meshblu'){\n        try{\n          var meshblu = require('meshblu');\n          VirtualSerialPort = require('skynet-serial').SerialPort;\n\n          client = meshblu.createConnection({\n            uuid: n.uuid,\n            token: n.token,\n            server: n.meshbluServer\n          });\n\n          client.once('ready', function(data){\n            console.log('client ready, creating virtual serial port');\n            sp = new VirtualSerialPort(client, n.sendUuid);\n            node.io = new firmata.Board(sp, {samplingInterval: 300, reportVersionTimeout: 15000});\n            start(node);\n          });\n          node.client = client;\n\n        }catch(exp){\n          console.log('error initializing mqtt firmata', exp);\n          process.nextTick(function() {\n            node.emit('ioError', exp);\n          });\n        }\n      }\n      else if(n.connectionType === 'tcplisten'){ //mode listen network\n\n        node.tcpServer = net.createServer(function(socket){\n          node.io = new firmata.Board(socket);\n          start(node);\n            console.log('client ready', socket.remoteAddress + \":\" + socket.remotePort );\n             socket.emit('open', {});\n            socket.on('error', function(err){\n            console.log('tcp error', err);\n            node.warn(err);\n            process.nextTick(function() {\n              node.emit('networkError', err);\n            });\n          });\n        }).listen(parseInt(n.tcpPort, 10));\n\n      }\n      else if(n.connectionType === 'tcp'){\n        //console.log('trying', n.tcpHost, n.tcpPort);\n        var options = {\n          host: n.tcpHost,\n          port: parseInt(n.tcpPort, 10)\n        };\n        var client = net.connect(options);\n        node.io = new firmata.Board(client);\n        client.on('connect', function(){\n          console.log('client ready');\n          client.emit('open', {});\n        });\n        start(node);\n\n        client.on('error', function(err){\n          console.log('tcp error', err);\n          node.warn(err);\n          process.nextTick(function() {\n            node.emit('networkError', err);\n          });\n        });\n\n      }\n      else if(n.connectionType === 'udp'){\n        VirtualSerialPort = require('udp-serial').SerialPort;\n        var options = {\n          host: n.tcpHost,\n          port: parseInt(n.tcpPort, 10),\n          type: 'udp4'\n        };\n        sp = new VirtualSerialPort(options);\n        node.io = new firmata.Board(sp, {reportVersionTimeout: 10});\n        process.nextTick(function() {\n          node.emit('networkReady', node.io);\n        });\n\n        start(node);\n\n        sp.on('error', function(err){\n          console.log('udp error', err);\n          node.warn(err);\n          process.nextTick(function() {\n            node.emit('networkError', err);\n          });\n        });\n\n      }\n    }\n    else if( 'raspi-io' === n.boardType ||\n             'beaglebone-io' === n.boardType ||\n             'galileo-io' === n.boardType ||\n             'blend-micro-io' === n.boardType ||\n             'chip-io' === n.boardType){\n\n      try{\n        node.io = new boardModule();\n        start(node);\n      }catch(exp){\n        console.log('error initializing io class', n.boardType, exp);\n        process.nextTick(function() {\n          node.emit('ioError', exp);\n        });\n      }\n    }\n    else if( 'bean-io' === n.boardType){\n\n      try{\n        var options = {};\n        if(n.beanId){\n          options.uuid = n.beanId;\n        }\n        node.io = new boardModule.Board(options);\n        start(node);\n      }catch(exp){\n        console.log('error initializing bean-io class', n.boardType, exp);\n        process.nextTick(function() {\n          node.emit('ioError', exp);\n        });\n      }\n    }\n    else if( 'imp-io' === n.boardType){\n\n      try{\n        node.io = new boardModule({agent: n.impId});\n        start(node);\n      }catch(exp){\n        console.log('error initializing imp-io class', n.boardType, exp);\n        process.nextTick(function() {\n          node.emit('ioError', exp);\n        });\n      }\n    }\n    else if( 'spark-io' === n.boardType){\n\n      try{\n        node.io = new boardModule({deviceId: n.sparkId, token: n.sparkToken});\n        start(node);\n      }catch(exp){\n        console.log('error initializing spark-io class', n.boardType, exp);\n        process.nextTick(function() {\n          node.emit('ioError', exp);\n        });\n      }\n    }\n\n    if(node.io && node.io.on){\n      node.io.on('error', function(err){\n        node.error(err);\n      });\n    }\n\n\n  }\n  RED.nodes.registerType(\"nodebot\", nodebotNode);\n\n  return nodebotNode;\n}\n\nmodule.exports = createNode;\n"}